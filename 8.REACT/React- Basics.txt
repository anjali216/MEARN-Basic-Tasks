REACT 
                                    -------------------------

        PROJECT CREATION

        1. npx create-react-app demo-app
        2. cd demo-app
        3. code .
        4. npm start


        PROJECT CREATION USING VITE  : https://vitejs.dev/

        1. npx create vite@latest demo-app -- --template react 
        2. cd demo-app
        3. code .
        4. npm install (For creating node modules)
        5. npm run dev
        
        ------------------------------------------------------------------------------------------------------------------

          Installing 3rd party Libraries

       1. MDB boottstrap :https://mdbootstrap.com/

          Steps : go to https://mdbootstrap.com/ -> docs-> react->get started-> installation

           npm i mdb-react-ui-kit link for installation & apply this code in terminal

       2 FONT AWESOME

           npm i @fortawesome/fontawesome-free

           CSS import

          Add the following lines in your MAIN.js file before the App.js file import:

           MAIN.JS

               import 'mdb-react-ui-kit/dist/css/mdb.min.css';
               import "@fortawesome/fontawesome-free/css/all.min.css";

           
       3 GOOGLE FONTS

              https://fonts.google.com/

             <link rel="preconnect" href="https://fonts.googleapis.com">
             <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
             <link href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300..800;1,300..800&family=Sevillana&display=swap" rel="stylesheet">
               
      4 ReactMaterial UI :https://mui.com/material-ui/
        npm install @mui/material  @emotion/react @emotion/styled

     5 React Bootstrap   
        Link:  https://react-bootstrap.github.io/
        
    6  Icons
        
      React Icons  :
      Links:-https://react-icons.github.io/react-icons/
     Installation :npm install react-icons --save

7 React-Toastify 
                Site : https://www.npmjs.com/package/react-toastify     
                Install : npm i react-toastify

-------------------------------------------------------------------------------------------------------------------------------------------------------------

            BASICS CONCEPTS

  1 DATA PASSING - ONE WAY DATA BINDING
   2. EVENTS 
   3.conditional Rendering
    ->if->&& (truthy operator)
     ->if else  ->?: 


4. React routing
https://reactrouter.com/en/main/router-components/browser-router

install : npm install  react-router-dom
  
  Browser Router->A <BrowserRouter> stores the current location in the browser's address bar using clean URLs and navigates using the browser's built-in history stack.
  Routes ->Rendered anywhere in the app, <Routes> will match a set of child routes from the current location.
  Route  ->Because the API and use cases for <Route /> includes data loading, mutations, and more, <Route> has its own documentation category.

5. react bootstarp

LINK-  https://react-bootstrap.github.io/

INSTALLATION- npm install react-bootstrap bootstrap

(FROM GETSTARTED)
<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
  integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN"
  crossorigin="anonymous"
/>


   PROJECT CREATION
                MEDIA APP FRONT-END CREATION
     ---------------------------------------------------------------------------------------------------------

 1. Project creation : npm create vite@latest media-app-frontend -- -- template react
 2. cd media-app-frontend
 3. npm install
 4.code . 
 5. Run the Project: npm  run dev
 6. Clean your project code
 7. Install 3rd party libraries
    ->React bootstrap
    ->Font awesome
    ->google-fonts


bootswatch- for theme in bootstrap

https://bootswatch.com/

MEDIA PLAYER APP USING JSON  SERVER
---------------------------------------------

1 create a folder named on media-app-backend
2inside it create a package.json file=>npm init or npm  init -y

3npm install -g json-server=> npm install json-server
4 create db.json file
5 Run the file =>npx json-server db.json

--------------------------------------------------------------------------------
Backend for PROJECT FAIR
--------------------------------------------------------------------------------

    1. Create a folder for backend - project-fair-backend
    2. Create package.json file - npm init -y
    3. Install 3rd party packages

    Express - npm i express
    ->Express.js is the most popular backend framework for Node.js, and it is an extensive part of the JavaScript ecosystem.
    ->It is designed to build single-page, multi-page, and hybrid web applications
    -> it has also become the standard for developing backend applications with Node.js, and it is the backend part of something known as the MERN stack.

    ->The MERN is a free and open-source JavaScript software stack for building dynamic websites and web applications that has the following components:

    ->MongoDB: MongoDB is the standard NoSQL database
    ->Express.js: The default web applications framework for building web apps
    ->React.js: The JavaScript framework used for building front-end web applications
    ->Node.js: JavaScript engine used for scalable server-side and networking applications.

    CORS - npm i cors 
    ->The word CORS stands for “Cross-Origin Resource Sharing”. Cross-Origin Resource Sharing is an HTTP-header based mechanism implemented by the browser which allows a server or an API(Application Programming Interface) to indicate any origins (different in terms of protocol, hostname, or port) other than its origin from which the unknown origin gets permission to access and load resources. The cors package available in the npm registry is used to tackle CORS errors in a Node.js application.

    Environment variables are variables external to our application which reside in the OS or the container of the app is running in. An environment variable is simply a name mapped to a value.
    Data which changes depending on the environment your app is running on should be set as environment variables. Some common examples are:

    -HTTP Port and Address
    -Database, cache, and other storage connection information
    -Location of static files/folders

    The dotenv Library
    This library does one task: loads environment variables from a .env file into the process.env variable in Node.jsThe dotenv Library


4 Create .env file & .gitignore file
5. Create index.js file  (root file or main entry point)

6. Create router, controller, models folders
   1)Routes :Used to create router object of express to define path
       ->Create a file named router.js
       ->Import express and create  router object
       ->Import router from the file
       ->Import router in index.js
        -> use router in express server application 
   
    2)Controllers : Used to implement logic to resolve client requests

3)Models: to define Scheme and model for mongodb client using  mongoose
    ->Create a folder
    ->Create a js file to define schema and model for mongodb collection

                   MONGOOSE
------------------------ --------------------------------------------------------------------------------------------------------------------------------------------
->Its a OBJECT DATA MODEL (DOM) for nodejs
->Install  npm i mongoose
->Its is used to connect nodejs with mongodb
->Mongoose is a MongoDB object model tooling designed to work in an asynchronous enviornment. Mongoose supports Node.js and Demo(alpha)


Install npm  i mongoose

->Schema: Structure of the document that we want to store in a collection 
->Model: Copy of colection in mongodb
    


7 React-Toastify 
                Site : https://www.npmjs.com/package/react-toastify     
                Install : npm i react-toastify





MVC Architecture
                     ------------------------
    What is Model-View-Controller?

    MVC is simply a design or architectural pattern used in software engineering. 
    While this isn’t a hard rule, but this pattern helps developers focus on a particular aspect of their application, one step at a time.

    The main goal of MVC is to split large applications into specific sections that have their own individual purpose.

    It also allows developers to logically structure applications in a secure way, which we will show in this tutorial. But first, let’s break down what each aspect of the pattern provides.

    Model
    As the name implies, a model is a design or structure. 
    In the case of MVC, the model determines how a database is structured, defining a section of the application that interacts with the database. 
    This is where we will define the properties of a user that will be store in our database.
    The controller accesses the database through the model. You could say that the model is the heart of the application.

    View
    The view is where end users interact within the application.
    Simply put, this is where all the HTML template files go.

    Controller
    The controller interacts with the model and serves the response and functionality to the view. 
    When an end user makes a request, it’s sent to the controller which interacts with the database.

    You can think of the controller as a waiter in a restaurant that handles customers’ orders, which in this case is the view. The waiter then goes to the kitchen, which is the model/database, and gets food to serve the customers, which is the controller handling the request.


		jsonwebtoken
-------------------------------------------------------------------------------
->Its used for authentication purpose
->Its  used to securely transfer information over the internet
->JWT to sign  token sign and send it back to the user on a successful login
->Token creation using JWT : use sign() method
      sign(payload,password)
  ->payload: Its the datathat we want to storeinside the token
   ->password : Can be any data that has to be define . env file
     ->Install : npm i jsonwebtoken


-------------------------------------------------------------------------------------------------------
                        Understanding Middleware in Node.js
-----------------------------------------------------------------------------------------------------
Reference:                                 Using Express middleware
                                http://expressjs.com/en/guide/using-middleware.html
                                Middleware in Express - GeeksforGeeks
                                https://www.geeksforgeeks.org/middleware-in-express-js/
                                A Complete Guide on How to Build Middleware For Node.js.
                                https://www.turing.com/kb/building-middleware-for-node-js
-----------------------------------------------------------------------------------------------------
        ->Middleware in Node.js is a powerful feature used within the Express framework to handle requests and responses. 
        ->Middleware functions are those that have access to the request object (req), the response object (res), and the next middleware function in the application's request-response cycle. ->The next middleware function is commonly denoted by a variable named next.

Key Principles of Middleware
----------------------------------
Middleware functions can:

        Execute any code.

        Make changes to the request and response objects.

        End the request-response cycle.

        Call the next middleware function in the stack.

If the current middleware function does not end the request-response cycle, it must call next() to pass control to the next middleware function. Otherwise, the request will be left hanging.

Types of Middleware in Node.js

Application-level middleware: Bound to an instance of the app object using app.use() and app.METHOD().

Router-level middleware: Similar to application-level middleware but bound to an instance of express.Router().

Error-handling middleware: Specifically designed to handle errors, defined with four parameters (err, req, res, next).

Built-in middleware: Comes with Express, such as express.static, express.json, and express.urlencoded.

Third-party middleware: Added functionality from external libraries, like cookie-parser or body-parser.

						Multer
-------------------------------------------------------------------------------------------------------------

Multer is a node.js middleware for handling multipart/form-data, which is primarily used for uploading files. It is written on top of busboy for maximum efficiency.

NOTE: Multer will not process any form which is not multipart (multipart/form-data)

Install :npm i multer


What is Context API?

Context API is used to pass global variables anywhere in the code. It helps when there is a need for sharing state between a lot of nested components. 
It is light in weight and easier to use, to create a context just need to call React.createContext(). No need to install other dependencies or 
third-party libraries like redux for state management.

Context API solves the problem of prop drilling in React. Prop Drilling occurs when data is to be passed between multiple layers before finally sending it to the required component. 
This makes the application slower. This problem is solved by Context API as it creates global variables to be used throughout the application without any middle components involved.
It is also easier to use than React Redux






 